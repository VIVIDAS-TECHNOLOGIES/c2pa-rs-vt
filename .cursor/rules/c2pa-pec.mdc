---
description: 
globs: 
alwaysApply: false
---
# C2PA and Media Format Specialization Guidelines

## C2PA Specification Expertise

### Core Concepts
1. **Claims and Manifests**
   - Follow [C2PA Specification v2.1](https://c2pa.org/specifications/specifications/2.1/specs/C2PA_Specification.html)
   - Implement claim generation and validation
   - Handle manifest embedding and extraction
   - Support claim redaction and updates

2. **Assertions**
   - Implement standard C2PA assertions
   - Support custom assertion types
   - Handle assertion validation
   - Manage assertion relationships

3. **Signatures and Validation**
   - COSE Sign1 structure implementation
   - Certificate chain validation
   - Time stamp authority integration
   - Hash verification

### Implementation Patterns

#### Claim Structure
```rust
pub struct Claim {
    // External manifest handling
    remote_manifest: RemoteManifest,
    update_manifest: bool,

    // Core claim fields
    pub title: Option<String>,
    pub format: Option<String>,
    pub instance_id: String,
    pub claim_generator: Option<String>,
    pub claim_generator_info: Option<Vec<ClaimGeneratorInfo>>,

    // Assertions and signatures
    signature_val: Vec<u8>,
    assertion_store: Vec<ClaimAssertion>,
    assertions: Vec<C2PAAssertion>,
    created_assertions: Vec<C2PAAssertion>,
    gathered_assertions: Option<Vec<C2PAAssertion>>,

    // Ingredients and data
    ingredients_store: HashMap<String, Vec<Claim>>,
    data_boxes: Vec<(HashedUri, DataBox)>,

    // Version and algorithm info
    claim_version: usize,
    alg: Option<String>,
    alg_soft: Option<String>,
}
```

#### Assertion Handling
```rust
pub struct ClaimAssertion {
    assertion: Assertion,
    instance: usize,
    hash_val: Vec<u8>,
    hash_alg: String,
    salt: Option<Vec<u8>>,
    typ: ClaimAssertionType,
}

impl ClaimAssertion {
    pub fn new(
        assertion: Assertion,
        instance: usize,
        hashval: &[u8],
        alg: &str,
        salt: Option<Vec<u8>>,
        typ: ClaimAssertionType,
    ) -> ClaimAssertion {
        ClaimAssertion {
            assertion,
            instance,
            hash_val: hashval.to_vec(),
            hash_alg: alg.to_string(),
            salt,
            typ,
        }
    }
}
```

#### Remote Manifest Handling
```rust
pub enum RemoteManifest {
    NoRemote,                // No external manifest
    SideCar,                 // Side car file
    Remote(String),          // Remote reference
    EmbedWithRemote(String), // Embedded with remote reference
}
```

## Media Format Specialization

### DASH (Dynamic Adaptive Streaming over HTTP)
1. **MPD (Media Presentation Description)**
   - Segment template handling
   - Adaptation set management
   - Period and representation structure
   - Content protection integration

2. **Segment Formats**
   - ISO Base Media File Format (BMFF)
   - CMAF (Common Media Application Format)
   - Initialization segment handling
   - Media segment processing

### BMFF (ISO Base Media File Format)
1. **Box Structure**
   - File type box (ftyp)
   - Movie box (moov)
   - Media data box (mdat)
   - Track box (trak)

2. **Implementation Patterns**
```rust
// BMFF Box Structure
pub struct Box {
    pub size: u32,
    pub box_type: [u8; 4],
    pub data: Vec<u8>,
}

// Track Structure
pub struct Track {
    pub track_id: u32,
    pub media_type: MediaType,
    pub timescale: u32,
    pub duration: u64,
    pub samples: Vec<Sample>,
}
```

### CMAF (Common Media Application Format)
1. **VOD (Video on Demand)**
   - Segment alignment
   - Track selection
   - Initialization segment
   - Media segment structure

2. **Live Streaming**
   - Segment timing
   - Playlist management
   - Live window handling
   - Segment availability

### MBR (Multiple Bitrate)
1. **Adaptation Logic**
   - Bandwidth estimation
   - Quality switching
   - Buffer management
   - Segment selection

2. **Implementation Patterns**
```rust
// Adaptation Set Structure
pub struct AdaptationSet {
    pub id: String,
    pub mime_type: String,
    pub representations: Vec<Representation>,
    pub segment_alignment: bool,
}

// Representation Structure
pub struct Representation {
    pub id: String,
    pub bandwidth: u32,
    pub width: Option<u32>,
    pub height: Option<u32>,
    pub codecs: String,
    pub initialization: String,
    pub media: String,
}
```

## Integration Guidelines

### C2PA with Media Formats
1. **Manifest Embedding**
   - Box structure preservation
   - Signature placement
   - Hash calculation
   - Validation integration

2. **Streaming Considerations**
   - Live manifest updates
   - Segment validation
   - Time stamp synchronization
   - Bandwidth impact

### Implementation Examples

#### C2PA Manifest in BMFF
```rust
pub struct C2paBox {
    pub size: u32,
    pub box_type: [u8; 4], // 'c2pa'
    pub manifest: Manifest,
    pub signature: Signature,
}

// DASH with C2PA
pub struct C2paAdaptationSet {
    pub adaptation_set: AdaptationSet,
    pub manifest: Option<Manifest>,
    pub validation_status: ValidationStatus,
}
```

#### Claim Generation
```rust
impl Claim {
    pub fn new<S: Into<String>>(
        claim_generator: S,
        vendor: Option<&str>,
        claim_version: usize,
    ) -> Self {
        Claim {
            claim_generator: Some(claim_generator.into()),
            instance_id: Uuid::new_v4().to_string(),
            claim_version,
            ..Default::default()
        }
    }

    pub fn add_assertion(
        &mut self,
        assertion_builder: &impl AssertionBase,
    ) -> Result<C2PAAssertion> {
        self.add_assertion_with_salt(assertion_builder, &NO_SALT)
    }
}
```

#### Validation
```rust
impl Claim {
    pub(crate) async fn verify_claim_async(
        claim: &Claim,
        asset_data: &mut ClaimAssetData<'_>,
        is_provenance: bool,
        cert_check: bool,
        ctp: &CertificateTrustPolicy,
        validation_log: &mut StatusTracker,
    ) -> Result<()> {
        // Implementation
    }

    pub fn verify_hash(&self, hash: &[u8]) -> bool {
        self.hash() == hash
    }
}
```

## Best Practices

### C2PA Implementation
1. **Security**
   - Secure signature generation
   - Certificate validation
   - Time stamp verification
   - Hash integrity checks

2. **Performance**
   - Efficient manifest parsing
   - Optimized validation
   - Memory management
   - Streaming optimization

### Media Format Handling
1. **DASH**
   - MPD validation
   - Segment alignment
   - Adaptation logic
   - Live window management

2. **CMAF**
   - VOD segment handling
   - Live streaming support
   - Track selection
   - Time synchronization

3. **MBR**
   - Bandwidth adaptation
   - Quality switching
   - Buffer management
   - Segment selection

## Testing Requirements

### C2PA Validation
1. **Manifest Testing**
   - Claim validation
   - Signature verification
   - Time stamp checking
   - Hash verification

2. **Media Format Testing**
   - Box structure validation
   - Segment alignment
   - Stream compatibility
   - Performance testing

### Integration Testing
1. **DASH Integration**
   - MPD generation
   - Segment handling
   - Adaptation testing
   - Live streaming

2. **CMAF Integration**
   - VOD testing
   - Live streaming
   - Track selection
   - Time synchronization

## References

### C2PA Documentation
- [C2PA Specification v2.1](https://c2pa.org/specifications/specifications/2.1/specs/C2PA_Specification.html)
- [C2PA Technical Specification](https://c2pa.org/specifications/specifications/2.1/specs/C2PA_Specification.html#_technical_specification)
- [C2PA Assertions](https://c2pa.org/specifications/specifications/2.1/specs/C2PA_Specification.html#_assertions)

### Media Format Documentation
- [DASH Specification](https://dashif.org/guidelines/)
- [CMAF Specification](https://aomediacodec.github.io/cmaf-spec/)
- [ISO Base Media File Format](https://www.iso.org/standard/68960.html)
- [MPEG-DASH](https://www.iso.org/standard/65274.html) 